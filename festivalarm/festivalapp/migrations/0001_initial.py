# Generated by Django 3.2.14 on 2022-08-18 11:43

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('kakao_id', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('username', models.CharField(max_length=100, null=True, unique='True')),
                ('access_token', models.CharField(max_length=255, null=True)),
                ('refresh_token', models.CharField(max_length=255, null=True)),
                ('password', models.CharField(max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Festival',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=1000)),
                ('ticket_link', models.URLField(blank=True)),
                ('Poster', models.ImageField(blank=True, null=True, upload_to='festival')),
                ('time_start', models.DateField(blank=True)),
                ('time_end', models.DateField(blank=True)),
                ('place', models.CharField(blank=True, max_length=1000)),
                ('ticket_open', models.DateField(blank=True)),
                ('lineup', models.CharField(blank=True, max_length=1000)),
                ('hits', models.IntegerField(blank=True, default=0, null=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='like', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OptionCount',
            fields=[
                ('festival', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='festivalapp.festival')),
                ('check_num', models.IntegerField(blank=True, default=0)),
                ('option1', models.IntegerField(blank=True, default=0)),
                ('option2', models.IntegerField(blank=True, default=0)),
                ('option3', models.IntegerField(blank=True, default=0)),
                ('option4', models.IntegerField(blank=True, default=0)),
                ('option5', models.IntegerField(blank=True, default=0)),
                ('option6', models.IntegerField(blank=True, default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='festivalapp.user')),
                ('nickname', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True)),
                ('body', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, upload_to='')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('hits', models.IntegerField(blank=True)),
                ('category', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_user', to=settings.AUTH_USER_MODEL)),
                ('festival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_festsival', to='festivalapp.festival')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_profile', to='festivalapp.profile')),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20)),
                ('name_address', models.CharField(blank=True, max_length=20)),
                ('land_address', models.CharField(blank=True, max_length=20)),
                ('festival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place_festsival', to='festivalapp.festival')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option1', models.IntegerField(blank=True, default=0)),
                ('option2', models.IntegerField(blank=True, default=0)),
                ('option3', models.IntegerField(blank=True, default=0)),
                ('option4', models.IntegerField(blank=True, default=0)),
                ('option5', models.IntegerField(blank=True, default=0)),
                ('option6', models.IntegerField(blank=True, default=0)),
                ('festival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_festsival', to='festivalapp.festival')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_post', to='festivalapp.post')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_profile', to='festivalapp.profile')),
            ],
        ),
    ]
